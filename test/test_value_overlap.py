import unittest
from collections import deque
from copy import copy

import numpy as np
from scipy.stats import norm

from value_disagreement.extraction import ValueConstants


class TestValueOverlap(unittest.TestCase):
    def overlap_circum(self, left, right):
        A = np.array([
            [1,0.5,0,0.5],
            [0.5,1,0.5,0],
            [0,0.5,1,0.5],
            [0.5,0,0.5,1],
        ])
        total = 0
        for i in range(4):
            for j in range(4):
                total += (A[i,j] / 2) * np.abs((left[i] + right[j]))

        return total

    def overlap_absum(self, left, right):
        return np.sum(np.abs(left, right))

    def test_overlap(self):

        x1 = np.array([0,0.5,0.5,0])
        x2 = np.array([0,0,0.5,0.5])
        x3 = np.array([0.5,0.5,0,0])

        values = [ValueConstants.SCHWARTZ_VALUES[i] for i in ValueConstants.SCHWARTZ_VALUES_CIRCUMPLEX_ORDER]

        score = self.overlap_circum(x1, x2)
        self.assertEqual(score, 2.0)
        score = self.overlap_circum(x2, x3)
        self.assertEqual(score, 2.0)

        score = self.overlap_absum(x1, x2)
        self.assertEqual(score, 1.0)
        score = self.overlap_absum(x2, x3)
        self.assertEqual(score, 1.0)
        A = []
        for i in range(9):
            A.append(norm.pdf(i, loc=4.5, scale=1))

        self.assertListEqual(A, [1.5983741106905478e-05, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995, 0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602])

        A_deque = deque(A)

        B = []
        for i in range(10):
            A_deque.rotate(i-5)
            A_n = list(copy(A_deque))
            A_n.insert(i, 1)
            B.append(A_n)

        self.assertListEqual(B, [[1, 0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995], [1.5983741106905478e-05, 1, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995, 0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602], [0.12951759566589174, 0.3520653267642995, 1, 0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 0.0008726826950457602, 0.01752830049356854], [0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 1, 0.0008726826950457602, 1.5983741106905478e-05, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995], [0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 1, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995, 0.3520653267642995], [0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 0.0008726826950457602, 1, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995, 0.3520653267642995], [0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 0.0008726826950457602, 1, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995], [0.12951759566589174, 0.3520653267642995, 0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 1, 0.0008726826950457602, 0.01752830049356854], [1.5983741106905478e-05, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995, 0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 1, 0.0008726826950457602], [0.3520653267642995, 0.12951759566589174, 0.01752830049356854, 0.0008726826950457602, 1.5983741106905478e-05, 0.0008726826950457602, 0.01752830049356854, 0.12951759566589174, 0.3520653267642995, 1]]
)